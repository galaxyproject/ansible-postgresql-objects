---
# tasks file for natefoo.postgresql-objects

- name: Revoke extra privileges
  postgresql_privs:
    database: "{{ item.database }}"
    roles: "{{ item.roles }}"
    type: "{{ item.type | default(omit) }}"
    objs: "{{ item.objs | default(omit) }}"
    privs: "{{ item.privs | default(omit) }}"
    schema: "{{ item.schema | default(omit) }}"
    grant_option: "{{ item.grant_option | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    login_host: "{{ postgresql_objects_login_host | default(omit) }}"
    login_user: "{{ postgresql_objects_login_user | default(omit) }}"
    login_password: "{{ postgresql_objects_login_password | default(omit) }}"
    port: "{{ postgresql_objects_port | default(omit) }}"
  with_items: "{{ postgresql_objects_privileges }}"
  register: revoke
  failed_when: "postgresql_objects_ignore_revoke_failure and revoke.failed is defined and ((revoke.failed and 'does not exist' not in revoke.msg) or (revoke.failed and ',' in item.roles))"
  when: item.state is defined and item.state == 'absent'

- name: Drop Schemas
  shell: echo DROP SCHEMA IF EXISTS '{{ item.name }}' | psql -w {{ '-h ' ~ postgresql_objects_login_host if postgresql_objects_login_host is defined else '' }} {{ '-U ' ~ postgresql_objects_login_user if postgresql_objects_login_user is defined else '' }} {{ '-p ' ~ postgresql_objects_port if postgresql_objects_port is defined else '' }} {{ item.database }}
  register: psql
  failed_when: psql.stderr.startswith( 'ERROR:' )
  changed_when: psql.stderr == ''
  with_items: ' {{ postgresql_objects_schemas }}'
  when: item.database is defined and item.name is defined and item.state is defined and item.state == 'absent'

# Drop databases first so later user drop can succeed
- name: Drop databases
  postgresql_db:
    name: "{{ item.name }}"
    owner: "{{ item.owner | default(omit) }}"
    template: "{{ item.template | default(omit) }}"
    encoding: "{{ item.encoding | default(omit) }}"
    lc_collate: "{{ item.lc_collate | default(omit) }}"
    lc_ctype: "{{ item.lc_ctype | default(omit) }}"
    state: "{{ item.state }}"
    login_host: "{{ postgresql_objects_login_host | default(omit) }}"
    login_user: "{{ postgresql_objects_login_user | default(omit) }}"
    login_password: "{{ postgresql_objects_login_password | default(omit) }}"
    port: "{{ postgresql_objects_port | default(omit) }}"
  with_items: "{{ postgresql_objects_databases }}"
  when: item.state is defined and item.state == 'absent'

- name: Create and drop users
  postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password | default(omit) }}"
    role_attr_flags: "{{ item.role_attr_flags | default(omit) }}"
    encrypted: "{{ item.encrypted | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    login_host: "{{ postgresql_objects_login_host | default(omit) }}"
    login_user: "{{ postgresql_objects_login_user | default(omit) }}"
    login_password: "{{ postgresql_objects_login_password | default(omit) }}"
    port: "{{ postgresql_objects_port | default(omit) }}"
  with_items: "{{ postgresql_objects_users }}"

- name: Create groups
  postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password | default(omit) }}"
    role_attr_flags: "{{ item.role_attr_flags | default(omit) }}"
    encrypted: "{{ item.encrypted | default(omit) }}"
    login_host: "{{ postgresql_objects_login_host | default(omit) }}"
    login_user: "{{ postgresql_objects_login_user | default(omit) }}"
    login_password: "{{ postgresql_objects_login_password | default(omit) }}"
    port: "{{ postgresql_objects_port | default(omit) }}"
  with_items: "{{ postgresql_objects_groups }}"
  when: item.state is not defined or (item.state is defined and item.state == 'present')

- name: Add or remove users from groups
  shell: >
    echo {{ 'REVOKE' if item.1.state is defined and item.1.state == 'absent' else 'GRANT' }} {{ item.0.name | quote }}
      {{ 'FROM' if item.1.state is defined and item.1.state == 'absent' else 'TO' }} {{ item.1.name | quote }} |
      psql -w {{ '-h ' ~ postgresql_objects_login_host if postgresql_objects_login_host is defined else '' }}
        {{ '-U ' ~ postgresql_objects_login_user if postgresql_objects_login_user is defined else '' }}
        {{ '-p ' ~ postgresql_objects_port if postgresql_objects_port is defined else '' }} postgres
  register: psql
  failed_when: psql.stderr.startswith('ERROR:')
  changed_when: psql.stderr == ''
  with_subelements:
    - "{{ postgresql_objects_groups }}"
    - users

- name: Drop groups
  postgresql_user:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    login_host: "{{ postgresql_objects_login_host | default(omit) }}"
    login_user: "{{ postgresql_objects_login_user | default(omit) }}"
    login_password: "{{ postgresql_objects_login_password | default(omit) }}"
    port: "{{ postgresql_objects_port | default(omit) }}"
  with_items: "{{ postgresql_objects_groups }}"
  when: item.state is defined and item.state == 'absent'

- name: Create databases
  postgresql_db:
    name: "{{ item.name }}"
    owner: "{{ item.owner | default(omit) }}"
    template: "{{ item.template | default(omit) }}"
    encoding: "{{ item.encoding | default(omit) }}"
    lc_collate: "{{ item.lc_collate | default(omit) }}"
    lc_ctype: "{{ item.lc_ctype | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    login_host: "{{ postgresql_objects_login_host | default(omit) }}"
    login_user: "{{ postgresql_objects_login_user | default(omit) }}"
    login_password: "{{ postgresql_objects_login_password | default(omit) }}"
    port: "{{ postgresql_objects_port | default(omit) }}"
  with_items: "{{ postgresql_objects_databases }}"
  when: item.state is not defined or (item.state is defined and item.state == 'present')

- name: Create Schemas
  shell: echo CREATE SCHEMA IF NOT EXISTS '{{ item.name }}' {{ 'AUTHORIZATION '+item.authorization if item.authorization is defined}} | psql -w {{ '-h ' ~ postgresql_objects_login_host if postgresql_objects_login_host is defined else '' }} {{ '-U ' ~ postgresql_objects_login_user if postgresql_objects_login_user is defined else '' }} {{ '-p ' ~ postgresql_objects_port if postgresql_objects_port is defined else '' }} {{ item.database }}
  register: psql
  failed_when: psql.stderr.startswith( 'ERROR:' )
  changed_when: psql.stderr == ''
  with_items: '{{ postgresql_objects_schemas }}'
  when: item.database is defined and item.name is defined and item.state is not defined or item.state != 'absent'

- name: Grant user database privileges
  postgresql_user:
    name: "{{ item.name }}"
    db: "{{ item.db }}"
    priv: "{{ item.priv }}"
    login_host: "{{ postgresql_objects_login_host | default(omit) }}"
    login_user: "{{ postgresql_objects_login_user | default(omit) }}"
    login_password: "{{ postgresql_objects_login_password | default(omit) }}"
    port: "{{ postgresql_objects_port | default(omit) }}"
  with_items: "{{ postgresql_objects_users }}"
  when: item.db is defined and item.priv is defined and not (item.state is defined and item.state == 'absent')

- name: Grant extra privileges
  postgresql_privs:
    database: "{{ item.database | default(omit) }}"
    roles: "{{ item.roles }}"
    type: "{{ item.type | default(omit) }}"
    objs: "{{ item.objs | default(omit) }}"
    privs: "{{ item.privs | default(omit) }}"
    schema: "{{ item.schema | default(omit) }}"
    grant_option: "{{ item.grant_option | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    login_host: "{{ postgresql_objects_login_host | default(omit) }}"
    login_user: "{{ postgresql_objects_login_user | default(omit) }}"
    login_password: "{{ postgresql_objects_login_password | default(omit) }}"
    port: "{{ postgresql_objects_port | default(omit) }}"
  with_items: "{{ postgresql_objects_privileges }}"
  when: item.state is not defined or (item.state is defined and item.state == 'present')
